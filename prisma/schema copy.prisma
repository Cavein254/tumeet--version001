datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") //Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  invitations   Invitation[]
  comments Comment[]
  profile  Profile?
}

model Profile {
  id String @id @default(cuid())
  slug String @unique
  profession String?
  bio String?
  languages String?
  github_url String?
  twitter_url String?
  facebook_url String?
  author   User @relation(fields: [authorId], references: [id])
  authorId String @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invitation {
  id String @id @default(cuid())
  slug String @unique
  title String 
  description String
  invite_url String
  published        Boolean?           @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deadline  DateTime
  author   User @relation(fields: [authorId], references: [id])
  authorId String 
}

model Comment {
  id String @id @default(cuid())
  slug String @unique
  body String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  author   User @relation(fields: [authorId], references: [id])
  authorId String 
}